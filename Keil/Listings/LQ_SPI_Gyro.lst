C251 COMPILER V5.60.0,  LQ_SPI_Gyro                                                        27/05/24  09:23:05  PAGE 1   


C251 COMPILER V5.60.0, COMPILATION OF MODULE LQ_SPI_Gyro
OBJECT MODULE PLACED IN .\Objects\LQ_SPI_Gyro.obj
COMPILER INVOKED BY: E:\_app\Keil5\C251\BIN\C251.EXE LQ_lib\app\LQ_SPI_Gyro.c XSMALL INTR2 BROWSE INCDIR(.\user;.\LQ_lib
                    -\app;.\LQ_lib\ddc;.\LQ_lib\driver) DEBUG PRINT(.\Listings\LQ_SPI_Gyro.lst) OBJECT(.\Objects\LQ_SPI_Gyro.obj) 

stmt  level    source

    1          /*LLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL
    2           【平    台】北京龙邱智能科技STC32G12K128 LQFP64核心板
    3           【编    写】chiusir
    4           【E-mail  】chiusir@163.com
    5           【软件版本】V1.1 版权所有，单位使用请先联系授权
    6           【最后更新】2023年11月20日
    7           【相关信息参考下列地址】
    8           【网    站】http://www.lqist.cn
    9           【淘宝店铺】http://longqiu.taobao.com
   10           ------------------------------------------------
   11           【IDE】STC32
   12           【Target 】 keil5.2及以上
   13           【SYS PLL】 35MHz使用内部晶振，通过
   14          =================================================================
   15          stc-isp下载时, 选择时钟 35MHZ
   16          QQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQ*/
   17          
   18          #include "include.h"
   19          
   20          #define MPU_ADDR  0x68  //SPI写入时的地址字节数据，+1为读取
   21          
   22          unsigned char SPI_ICM20602 = 0;
   23          unsigned char SPI_ICM20689 = 0;
   24          unsigned char SPI_MPU9250 = 0;
   25          unsigned char SPI_ICM42605 = 0;
   26          unsigned char SPI_errorid = 0;
   27          
   28          unsigned char Gyro_ID_SPI = 0;
   29          
   30          unsigned char Gyro_Read_Byte_SPI(unsigned char reg);
   31          
   32          signed short  aacx_spi,aacy_spi,aacz_spi;            //加速度传感器原始数据
   33          signed short  gyrox_spi,gyroy_spi,gyroz_spi;         //陀螺仪原始数据
   34          short magx_spi, magy_spi, magz_spi;
   35          
   36          /**
   37            * @brief   读取陀螺仪的设备ID
   38            *
   39            * @param   void
   40            *
   41            * @retur   void
   42            *
   43            * @note
   44            *
   45            * @see      Gyro_Chose();
   46            *
   47            * @date     2021/7/12 星期一
   48            */
   49          unsigned char Gyro_Chose_SPI(void)
   50          {
   51   1          Gyro_ID_SPI = Gyro_Read_Byte_SPI(WHO_AM_I);
   52   1          switch(Gyro_ID_SPI)
   53   1          {
   54   2              case 0x12:SPI_ICM20602 = 1;break;
   55   2              case 0x71:SPI_MPU9250 = 1;break;
   56   2              case 0x98:SPI_ICM20689 = 1;break;
   57   2              case 0x42:SPI_ICM42605 = 1;break;
   58   2              default :SPI_errorid = 1;return Gyro_ID_SPI;
C251 COMPILER V5.60.0,  LQ_SPI_Gyro                                                        27/05/24  09:23:05  PAGE 2   

   59   2          }
   60   1          return Gyro_ID_SPI;
   61   1      }
   62          
   63          unsigned char Gyro_Read_Byte_SPI(unsigned char reg)
   64          {
   65   1          uint8 buff[2];
   66   1          buff[0] = reg | 0x80;          //先发送寄存器
   67   1      
   68   1          Soft_SPI_ReadWriteNbyte(buff, 2);
   69   1          
   70   1          return buff[1];
   71   1      }
   72          
   73          void ICM_Read_Len(uint8_t reg,uint8_t len,uint8_t *buf)
   74          {   
   75   1          buf[0] = reg | 0x80;
   76   1          /* 写入要读的寄存器地址 */
   77   1          Soft_SPI_ReadWriteNbyte(buf, len + 1);
   78   1      
   79   1      }
   80          
   81          void Gyro_Write_Byte_SPI(uint8_t reg,uint8_t value)
   82          {
   83   1          uint8_t buff[2];
   84   1      
   85   1          buff[0] = reg;          //先发送寄存器
   86   1          buff[1] = value;        //再发送数据
   87   1      
   88   1          Soft_SPI_ReadWriteNbyte(buff, 2);//发送buff里数据，并采集到 buff里
   89   1      }
   90          
   91          unsigned char Gyro_Get_Raw_data_SPI(short *ax,short *ay,short *az,short *gx,short *gy,short *gz)
   92          {
   93   1          unsigned char buf[15];
   94   1              ICM_Read_Len(ICM_ACCEL_XOUTH_REG,14,buf);
   95   1              
   96   1          *ax=((uint16)buf[1]<<8)|buf[2];
   97   1          *ay=((uint16)buf[3]<<8)|buf[4];
   98   1          *az=((uint16)buf[5]<<8)|buf[6];
   99   1          *gx=((uint16)buf[9]<<8)|buf[10];
  100   1          *gy=((uint16)buf[11]<<8)|buf[12];
  101   1              *gz=((uint16)buf[13]<<8)|buf[14];
  102   1          return 0;
  103   1      }
  104          //测试母板IMU陀螺仪接口，测试spi陀螺仪20602、20689  使用时需要将该接口的3v3引脚和板子上其他的3v3引脚相连
  105          void Test_SPI_Gyro(void)
  106          {
  107   1          signed short accelerat_X, accelerat_Y, accelerat_Z;
  108   1          signed short gyro_X, gyro_Y, gyro_Z;
  109   1          unsigned char res;
  110   1          char  txt[30];
  111   1      
  112   1          Soft_SPI_Init();
  113   1      
  114   1              delayms(500);
  115   1          OLED_Init();                //LCD初始化
  116   1          OLED_CLS();                 //LCD清屏
  117   1          
  118   1          res = Gyro_Chose_SPI();
  119   1          OLED_P14x16Str(8,0,(unsigned char*)"北京龙邱智能科技");             //字符串显示
  120   1          sprintf(txt,"ID:0X%2x",res);
  121   1          OLED_P6x8Str(70,2,txt);     // 字符串显示 
  122   1          if(res == 0xff)
  123   1          {
  124   2              sprintf(txt,"Gyro init error",res);
C251 COMPILER V5.60.0,  LQ_SPI_Gyro                                                        27/05/24  09:23:05  PAGE 3   

  125   2              OLED_P6x8Str(5,4,txt);     // 字符串显示
  126   2              while(1);        
  127   2          }
  128   1          
  129   1          Gyro_Write_Byte_SPI(ICM_PWR_MGMT1_REG,0X80);//复位
  130   1          delayms(100);  //延时100ms
  131   1          Gyro_Write_Byte_SPI(ICM_PWR_MGMT1_REG,0X00);//唤醒
  132   1          delayms(100);  //延时100ms
  133   1      
  134   1          Gyro_Write_Byte_SPI(ICM_GYRO_CFG_REG,3<<3);//设置陀螺仪满量程范围
  135   1          Gyro_Write_Byte_SPI(ICM_ACCEL_CFG_REG,1<<3);//设置加速度传感器满量程范围  
  136   1          Gyro_Write_Byte_SPI(ICM_SAMPLE_RATE_REG,1000/999);  //设置数字低通滤波器
  137   1          Gyro_Write_Byte_SPI(ICM_CFG_REG,1);//设置数字低通滤波器  
  138   1          Gyro_Write_Byte_SPI(ICM_CFG_REG,0x02);      //设置数字低通滤波器   98hz
  139   1          Gyro_Write_Byte_SPI(ICM_INT_EN_REG,0X00);   //关闭所有中断
  140   1          Gyro_Write_Byte_SPI(ICM_USER_CTRL_REG,0X00);//I2C主模式关闭
  141   1          Gyro_Write_Byte_SPI(ICM_PWR_MGMT1_REG,0X01);//设置CLKSEL,PLL X轴为参考
  142   1          Gyro_Write_Byte_SPI(ICM_PWR_MGMT2_REG,0X00);//加速度与陀螺仪都工作
  143   1      
  144   1          while(1)
  145   1          {
  146   2              Gyro_Get_Raw_data_SPI(&accelerat_X, &accelerat_Y, &accelerat_Z, &gyro_X, &gyro_Y, &gyro_Z);
  147   2              sprintf((char*)txt,"ax:%06d",accelerat_X);
  148   2              OLED_P6x8Str(0,2,txt);
  149   2              sprintf((char*)txt,"ay:%06d",accelerat_Y);
  150   2              OLED_P6x8Str(0,3,txt);
  151   2              sprintf((char*)txt,"az:%06d",accelerat_Z);
  152   2              OLED_P6x8Str(0,4,txt);
  153   2              sprintf((char*)txt,"gx:%06d",gyro_X);
  154   2              OLED_P6x8Str(0,5,txt);
  155   2              sprintf((char*)txt,"gy:%06d",gyro_Y);
  156   2              OLED_P6x8Str(0,6,txt);
  157   2              sprintf((char*)txt,"gz:%06d",gyro_Z);
  158   2              OLED_P6x8Str(0,7,txt);
  159   2               delayms(20);
  160   2          }
  161   1      }


Module Information          Static   Overlayable
------------------------------------------------
  code size            =       742     ------
  ecode size           =    ------     ------
  data size            =    ------     ------
  idata size           =    ------     ------
  pdata size           =    ------     ------
  xdata size           =    ------     ------
  xdata-const size     =    ------     ------
  edata size           =        24         81
  bit size             =    ------     ------
  ebit size            =    ------     ------
  bitaddressable size  =    ------     ------
  ebitaddressable size =    ------     ------
  far data size        =    ------     ------
  huge data size       =    ------     ------
  const size           =    ------     ------
  hconst size          =       120     ------
End of Module Information.


C251 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
