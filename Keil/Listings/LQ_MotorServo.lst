C251 COMPILER V5.60.0,  LQ_MotorServo                                                      27/05/24  09:23:06  PAGE 1   


C251 COMPILER V5.60.0, COMPILATION OF MODULE LQ_MotorServo
OBJECT MODULE PLACED IN .\Objects\LQ_MotorServo.obj
COMPILER INVOKED BY: E:\_app\Keil5\C251\BIN\C251.EXE LQ_lib\driver\LQ_MotorServo.c XSMALL INTR2 BROWSE INCDIR(.\user;.\L
                    -Q_lib\app;.\LQ_lib\ddc;.\LQ_lib\driver) DEBUG PRINT(.\Listings\LQ_MotorServo.lst) OBJECT(.\Objects\LQ_MotorServo.obj) 

stmt  level    source

    1          #include "include.h"
    2          
    3          #define USEDRV8701     //使用不同的驱动，定义不同的宏定义
    4          //#define USE7843OR7971//使用不同的驱动，定义不同的宏定义
    5          
    6          #define PWM1_0      0x00        //P:P1.0  N:P1.1
    7          #define PWM1_1      0x01        //P:P2.0  N:P2.1 
    8          #define PWM1_2      0x02        //P:P6.0  N:P6.1
    9          
   10          #define PWM2_0      0x00        //P:P1.2/P5.4  N:P1.3
   11          #define PWM2_1      0x04        //P:P2.2  N:P2.3
   12          #define PWM2_2      0x08        //P:P6.2  N:P6.3
   13          
   14          #define PWM3_0      0x00        //P:P1.4  N:P1.5
   15          #define PWM3_1      0x10        //P:P2.4  N:P2.5
   16          #define PWM3_2      0x20        //P:P6.4  N:P6.5
   17          
   18          #define PWM4_0      0x00        //P:P1.6  N:P1.7
   19          #define PWM4_1      0x40        //P:P2.6  N:P2.7
   20          #define PWM4_2      0x80        //P:P6.6  N:P6.7
   21          #define PWM4_3      0xC0        //P:P3.4  N:P3.3
   22          
   23          #define PWM5_0      0x00        //P2.0
   24          #define PWM5_1      0x01        //P1.7
   25          #define PWM5_2      0x02        //P0.0
   26          #define PWM5_3      0x03        //P7.4
   27          
   28          #define PWM6_0      0x00        //P2.1
   29          #define PWM6_1      0x04        //P5.4
   30          #define PWM6_2      0x08        //P0.1
   31          #define PWM6_3      0x0C        //P7.5
   32          
   33          #define PWM7_0      0x00        //P2.2
   34          #define PWM7_1      0x10        //P3.3
   35          #define PWM7_2      0x20        //P0.2
   36          #define PWM7_3      0x30        //P7.6
   37          
   38          #define PWM8_0      0x00        //P2.3
   39          #define PWM8_1      0x40        //P3.4
   40          #define PWM8_2      0x80        //P0.3
   41          #define PWM8_3      0xC0        //P7.7
   42          
   43          #define ENO5P       0x01
   44          #define ENO6P       0x04
   45          #define ENO7P       0x10
   46          #define ENO8P       0x40
   47          #define ENO1P       0x01
   48          #define ENO1N       0x02
   49          #define ENO2P       0x04
   50          #define ENO2N       0x08
   51          #define ENO3P       0x10
   52          #define ENO3N       0x20
   53          #define ENO4P       0x40
   54          #define ENO4N       0x80
   55          
   56          
   57          u16 PWM1_Duty;
   58          u16 PWM2_Duty;
C251 COMPILER V5.60.0,  LQ_MotorServo                                                      27/05/24  09:23:06  PAGE 2   

   59          u16 PWM3_Duty;
   60          u16 PWM4_Duty;
   61          
   62          /*LLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL
   63          【函数名】void MotorInit(u16 freq)
   64          【功  能】电机PWM初始化
   65          【参数值】int Encoder 编码器脉采集的冲数
   66          【参数值】int Target  期望脉冲数
   67          【返回值】电机PWM 
   68          【作  者】chiusir
   69          【最后更新】2021年1月22日 
   70          【软件版本】V1.0
   71          【调用举例】驱动电机  TIM4_PWM_Init(1000-1);  //1KHZ周期
   72          QQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQ*/
   73          #ifdef USE7843OR7971            //不看
               void MotorInit(u16 freq)        //不看
               {
                       P_SW2 |= 0x80;
                       PWMB_PS = 0xff;         //切换PWM引脚为 7.4 7.5 7.6 7.7
                       PWMB_PSCRL = (MAIN_Fosc/PWMB_CLOCK)-1;          //主频为22M,PWM分频到10M范围 
                       PWMB_CCER1 = 0x00;                                                                                              //写 CCMRx 前必须先清零 CCxE 关闭通道
                 PWMB_CCER2 = 0x00;
                 PWMB_CCMR1 = 0x60;                                                                                            //通道模式配置
                 PWMB_CCMR2 = 0x60;
                 PWMB_CCMR3 = 0x60;
                 PWMB_CCMR4 = 0x60;
                 PWMB_CCER1 = 0x33;                                                                                            //配置通道输出使能和极性
                 PWMB_CCER2 = 0x33;
                 
                 PWMB_ARRH  = (u8)((PWMB_CLOCK/freq)>>8);  //设置周期时间，从0计数到设定数值
                 PWMB_ARRL  = (u8)(PWMB_CLOCK/freq); //  
                 
                 PWMB_CCR1H = 0;
                 PWMB_CCR1L = 20;      //设置占空比时间
                 PWMB_CCR2H = 0;
                 PWMB_CCR2L = 20;      //设置占空比时间        
                 PWMB_CCR3H = 0;
                 PWMB_CCR3L = 20;      //设置占空比时间
                 PWMB_CCR4H = 0;       
                 PWMB_CCR4L = 20;      //设置占空比时间
                 
                 PWMB_ENO = 0x00;
                 PWMB_ENO |= ENO5P; //使能输出
                 PWMB_ENO |= ENO6P; //使能输出 
                 PWMB_ENO |= ENO7P; //使能输出
                 PWMB_ENO |= ENO8P; //使能输出 
                 PWMB_PS = 0x00;    //高级 PWM 通道输出脚选择位
                 PWMB_PS |= PWM5_3; //选择 PWM5_3 通道
                 PWMB_PS |= PWM6_3; //选择 PWM6_3 通道 //高级 PWM 通道 4P 输出脚选择位, 0x00:P1.6, 0x40:P2.6, 0x80:P6.6,
             - 0xC0:P3.4
                 PWMB_PS |= PWM7_3;
                 PWMB_PS |= PWM8_3;
                 PWMB_BKR = 0x80;   //使能主输出
                 PWMB_CR1 |= 0x01;  //开始计时
                 P_SW2 &= 0x7f;
               }
               #elif defined USEDRV8701
  115          void MotorInit(u16 freq)
  116          {
  117   1      
  118   1        P_SW2 |= 0x80;                                                        //设置P_SW2寄存器的最高位，选择PWM输出引脚的
  119   1        PWMB_PSCRL = (MAIN_Fosc/PWMB_CLOCK)-1;        //主频为35M,PWM分频到10M范围 MAIN_Fosc是主频，PWMB_CLOCK是PWM
             -的工作频率 设置PWM的预分频器，通过除以预分频系数来调整PWM的频率。
  120   1      
  121   1        PWMB_CCER1 = 0x00;                                            //写 CCMRx 前必须先清零 CCxE 关闭通道
  122   1        PWMB_CCER2 = 0x00;                                            //清零PWM控制寄存器1和2，关闭所有PWM输出通道。
C251 COMPILER V5.60.0,  LQ_MotorServo                                                      27/05/24  09:23:06  PAGE 3   

  123   1              
  124   1        PWMB_CCMR1 = 0x64;    //通道模式配置 PWM1模式
  125   1        PWMB_CCMR2 = 0x64;    //
  126   1        PWMB_CCMR3 = 0x60;    //
  127   1        PWMB_CCMR4 = 0x60;    //
  128   1              
  129   1        PWMB_CCER1 = 0x55;    //配置通道输出使能和极性
  130   1        PWMB_CCER2 = 0x55;    //
  131   1        
  132   1        PWMB_ARRH  = (u8)((PWMB_CLOCK/freq)>>8);  //设置freq周期时间，从0计数到设定数值
  133   1        PWMB_ARRL  = (u8)(PWMB_CLOCK/freq);           //  
  134   1        
  135   1        PWMB_CCR1H = 100;             //设置占空比时间
  136   1        PWMB_CCR1L = 200;     //
  137   1              
  138   1        PWMB_CCR3H = 100;             //设置占空比时间
  139   1        PWMB_CCR3L = 200;     //      
  140   1              
  141   1        PWMB_CR1 |= 0x80;             //自动预装载允许
  142   1        PWMB_CR1 &= ~0x70;    //边沿对齐  向上计数
  143   1        
  144   1        PWMB_ENO = 0x00;              //清空PWM使能输出寄存器
  145   1        PWMB_ENO |= ENO5P;    //使能输出
  146   1        //PWMB_ENO |= ENO6P;  //使能输出 
  147   1        PWMB_ENO |= ENO7P;    //使能输出
  148   1        //PWMB_ENO |= ENO8P;  //使能输出 
  149   1        
  150   1        PWMB_PS = 0x00;       //高级 PWM 通道输出脚选择位  4P 输出脚选择位, 0x00:P1.6, 0x40:P2.6, 0x80:P6.6, 0xC0:
             -P3.4
  151   1        PWMB_PS |= PWM5_3;    //选择 PWM5_3 通道
  152   1        //PWMB_PS |= PWM6_3;  //选择 PWM6_3 通道
  153   1        PWMB_PS |= PWM7_3;    //选择 PWM7_3 通道
  154   1        //PWMB_PS |= PWM8_3;  //选择 PWM8_3 通道
  155   1        
  156   1        PWMB_BKR = 0x80;                      //使能主输出
  157   1        PWMB_CR1 |= 0x01;             //开始计时
  158   1        
  159   1        P7M1 = 0;                             //P75,P77设置为推挽输出，强上拉，要加限流电阻
  160   1        P7M0 = 0xA0;                          //
  161   1        P7PU |= 0xA0;                         //使能P75和P77的上拉电阻
  162   1        
  163   1        P_SW2 &= 0x7f;                        //关闭PWM输出引脚选择
  164   1      }
  165          #endif
  166          //电机初始化
  167          
  168          
  169          /*LLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL
  170          【函数名】void MotorCtrl(float motor1, float motor2)
  171          【功  能】电机控制函数
  172          【参数值】motor1   ： 电机1占空比
  173          【参数值】motor2   ： 电机2占空比
  174          【返回值】电机PWM 
  175          【作  者】chiusir
  176          【最后更新】2021年1月22日 
  177          【软件版本】V1.0
  178          【调用举例】 MotorCtrl (1000,-2000) //两个电机一正一反转动
  179          QQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQ*/
  180          #ifdef  USE7843OR7971                                                   //不看
               void MotorCtrl (int16_t motor1,int16_t motor2)  //不看
               {
                 if (motor1 < 0)
                 {      
                               motor1=0-motor1;
                   P_SW2 |= 0x80;
                   PWMB_CCR1H = 0; //设置占空比时间
C251 COMPILER V5.60.0,  LQ_MotorServo                                                      27/05/24  09:23:06  PAGE 4   

                   PWMB_CCR1L = 0;
                   PWMB_CCR2H = (u8)(motor1 >> 8); //设置占空比时间
                   PWMB_CCR2L = (u8)(motor1);
                   P_SW2 &= 0x7f;
                 }
                 else
                 {
                   P_SW2 |= 0x80;
                   PWMB_CCR1H = (u8)(motor1 >> 8); //设置占空比时间
                   PWMB_CCR1L = (u8)(motor1);
                   PWMB_CCR2H = 0; //设置占空比时间
                   PWMB_CCR2L = 0;
                   P_SW2 &= 0x7f;
                 }  
                 if (motor2 < 0)
                 {      
                               motor2=0-motor2;
                   P_SW2 |= 0x80;
                   PWMB_CCR3H = 0; //设置占空比时间
                   PWMB_CCR3L = 0;
                   PWMB_CCR4H = (u8)(motor2 >> 8); //设置占空比时间
                   PWMB_CCR4L = (u8)(motor2);
                   P_SW2 &= 0x7f;
                 }
                 else
                 {
                   P_SW2 |= 0x80;
                   PWMB_CCR3H = (u8)(motor2 >> 8); //设置占空比时间
                   PWMB_CCR3L = (u8)(motor2);
                   PWMB_CCR4H = 0; //设置占空比时间
                   PWMB_CCR4L = 0;
                   P_SW2 &= 0x7f;
                 }  
               }
               #elif defined USEDRV8701
  223          void MotorCtrl (int16_t motor1,int16_t motor2)
  224          {
  225   1        if (motor1 < 0)
  226   1        {      
  227   2              motor1=0-motor1;
  228   2          P_SW2 |= 0x80;
  229   2          PWMB_CCR1H = (u8)(motor1 >> 8); //设置占空比时间
  230   2          PWMB_CCR1L = (u8)(motor1);
  231   2          P75=1;
  232   2          
  233   2          P_SW2 &= 0x7f;
  234   2        }
  235   1        else
  236   1        {
  237   2          P_SW2 |= 0x80;
  238   2          PWMB_CCR1H = (u8)(motor1 >> 8); //设置占空比时间
  239   2          PWMB_CCR1L = (u8)(motor1);
  240   2          P75=0;
  241   2          P_SW2 &= 0x7f;
  242   2        }
  243   1        
  244   1        if (motor2 < 0)
  245   1        {      
  246   2              motor2=0-motor2;
  247   2          P_SW2 |= 0x80;
  248   2          PWMB_CCR3H = (u8)(motor2 >> 8); //设置占空比时间
  249   2          PWMB_CCR3L = (u8)(motor2);
  250   2          P77=1;
  251   2          P_SW2 &= 0x7f;
  252   2        }
  253   1        else
C251 COMPILER V5.60.0,  LQ_MotorServo                                                      27/05/24  09:23:06  PAGE 5   

  254   1        {
  255   2          P_SW2 |= 0x80;
  256   2          PWMB_CCR3H = (u8)(motor2 >> 8); //设置占空比时间
  257   2          PWMB_CCR3L = (u8)(motor2);
  258   2          P77=0;
  259   2          P_SW2 &= 0x7f;
  260   2        }  
  261   1      }
  262          #endif
  263          //电机控制
  264          
  265          
  266          
  267          
  268          
  269          
  270          
  271          
  272          
  273          
  274          
  275          
  276          
  277          
  278          
  279          
  280          
  281          
  282          
  283          
  284          
  285          
  286          
  287          
  288          
  289          
  290          
  291          
  292          
  293          
  294          /*LLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL
  295          【函数名】void ServoInit(u16 freq)
  296          【功  能】舵机PWM初始化
  297          【参数值】u16 freq,期望频率，范围0--10000
  298          【参数值】无
  299          【返回值】无
  300          【作  者】chiusir
  301          【最后更新】2021年1月22日 
  302          【软件版本】V1.0
  303          【调用举例】驱动1个舵机 ServoInit(100);  //100HZ周期
  304          QQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQ*/
  305          void ServoInit(u16 freq)
  306          {
  307   1        P_SW2 |= 0x80;        
  308   1        //PWM1_PSCRL = 16; //分频范围  fcn_cnt=fck_psc/(PSCR[15:0]+1)
  309   1        PWMA_PSCRL = MAIN_Fosc/PWMA_CLOCK-1;      //主频为30M,PWM分频到1M范围  
  310   1        PWMA_CCER2 = 0x00; //写 CCMRx 前必须先清零 CCxE 关闭通道 清零PWM控制寄存器2，关闭所有PWM输出通道。
  311   1        PWMA_CCMR4 = 0x60; //设置 PWM4 模式1 输出
  312   1        PWMA_CCER2 = 0x55; //使能 CC4E 通道
  313   1        
  314   1        PWMA_ARRH  = (u8)((PWMA_CLOCK/freq)>>8);  //设置PWM的周期时间，从0计数到设定数值
  315   1        PWMA_ARRL  = (u8)(PWMA_CLOCK/freq);       //
  316   1        
  317   1        PWMA_CCR4H = (u8)((Servo_Center)>>8);     //舵机中值
  318   1        PWMA_CCR4L = (u8)(Servo_Center);          //设置PWM4通道的占空比，即舵机的中值位置
  319   1        
C251 COMPILER V5.60.0,  LQ_MotorServo                                                      27/05/24  09:23:06  PAGE 6   

  320   1        PWMA_ENO |= 0x80; //使能 PWM4N 输出
  321   1        PWMA_PS  |= 0x00; //高级 PWM 通道 4N 输出脚选择位, 0x00:P1.7, 0x40:P2.7, 0x80:P6.7, 0xC0:P3.3
  322   1        
  323   1        PWMA_BKR = 0x80;  //使能主输出
  324   1        PWMA_CR1 |= 0x01; //开始计时
  325   1        P_SW2 &= 0x7f;                
  326   1      }
  327          //舵机初始化
  328          
  329          
  330          /*LLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL
  331          【函数名】void ServoCtrl (uint16_t duty)
  332          【功  能】舵机转角函数，由于小车拉杆范围限制，较小
  333          【参数值】short duty，占空比，范围0--10000；
  334          【参数值】int Target  期望脉冲数
  335          【返回值】电机PWM 
  336          【作  者】chiusir
  337          【最后更新】2021年1月22日 
  338          【软件版本】V1.0
  339          【调用举例】ServoCtrl (1500);//舵机中值
  340          QQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQ*/
  341          void ServoCtrl(uint16_t duty)
  342          {  
  343   1              
  344   1        if (duty >= Servo_Left_Max)               //限制幅值
  345   1        duty = Servo_Left_Max;
  346   1          else if (duty < Servo_Right_Min)        //限制幅值
  347   1        duty = Servo_Right_Min;
  348   1        
  349   1        P_SW2 |= 0x80;
  350   1        PWMA_CCR4H = (u8)(duty >> 8);                         //设置占空比时间
  351   1        PWMA_CCR4L = (u8)(duty);
  352   1        P_SW2 &= 0x7f;
  353   1      }
  354          //舵机控制
  355          
  356          
  357          
  358          
  359          


Module Information          Static   Overlayable
------------------------------------------------
  code size            =       603     ------
  ecode size           =    ------     ------
  data size            =    ------     ------
  idata size           =    ------     ------
  pdata size           =    ------     ------
  xdata size           =    ------     ------
  xdata-const size     =    ------     ------
  edata size           =         8     ------
  bit size             =    ------     ------
  ebit size            =    ------     ------
  bitaddressable size  =    ------     ------
  ebitaddressable size =    ------     ------
  far data size        =    ------     ------
  huge data size       =    ------     ------
  const size           =    ------     ------
  hconst size          =    ------     ------
End of Module Information.


C251 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
